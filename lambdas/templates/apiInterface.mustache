val {{nickname}}Handler: RoutingHttpHandler = "{{path}}" bind Method.{{httpMethod}} to { req ->
        {{#hasAuthMethods}}
        val authorizer = context.extract(req).get<Authorizer>(LAMBDA_AUTHORIZER_KEY)
        val requesterUserId = authorizer?.claims?.get("sub")!!
        val isAdmin = authorizer?.claims?.get("custom:isAdmin")?.toBoolean() ?: false
        val adminProtected = listOf("completeMatch", "setMatchScore", "createMatch", "createTeam")
        if ("{{nickname}}" in adminProtected && !isAdmin) {
            return@to Response(Status.FORBIDDEN).body("Admin privileges are required for this operation.")
        }
        {{/hasAuthMethods}}
        {{#allParams}}{{#isPathParam}}val {{paramName}}: {{{dataType}}}{{^required}}?{{/required}} = req.path("{{paramName}}"){{#required}}!!{{/required}}{{/isPathParam}}{{/allParams}}
        {{#allParams}}
        {{#isQueryParam}}val {{paramName}}: {{{dataType}}}{{^required}}?{{/required}} = req.query("{{paramName}}"){{#required}}!!{{/required}}{{/isQueryParam}}
        {{/allParams}}
        {{#allParams}}{{#isBodyParam}}val {{paramName}}: {{{dataType}}} = req.bodyString().fromJson(){{/isBodyParam}}{{/allParams}}
        {{#returnType}}val response: {{{returnType}}} = {{/returnType}}{{nickname}}({{#hasAuthMethods}}requesterUserId{{#allParams.0}},{{/allParams.0}}{{/hasAuthMethods}}{{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}})
        Response(Status.OK){{#returnType}}.body(response.toJson()){{/returnType}}
    }

    abstract fun {{nickname}}({{#hasAuthMethods}}requesterUserId: String{{#allParams.0}},{{/allParams.0}}{{/hasAuthMethods}}{{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{^-last}},{{/-last}}{{/allParams}}){{#returnResponse}}: {{#useMutiny}}io.smallrye.mutiny.Uni<{{/useMutiny}}Response{{#useMutiny}}>{{/useMutiny}}{{/returnResponse}}{{^returnResponse}}{{#returnType}}: {{#useMutiny}}io.smallrye.mutiny.Uni<{{/useMutiny}}{{{returnType}}}{{#useMutiny}}>{{/useMutiny}}{{/returnType}}{{/returnResponse}}{{^returnResponse}}{{^returnType}}{{#useMutiny}}: io.smallrye.mutiny.Uni<Void>{{/useMutiny}}{{/returnType}}{{/returnResponse}}