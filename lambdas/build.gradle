import org.jetbrains.kotlin.gradle.internal.KaptGenerateStubsTask
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask
import org.jlleitschuh.gradle.ktlint.tasks.KtLintFormatTask

buildscript {
    ext.kotlin_version = "1.9.21"
    ext.kotshiVersion = "2.15.0"
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
        classpath("org.openapitools:openapi-generator-gradle-plugin:6.0.0")
    }
}

plugins {
    id "org.jetbrains.kotlin.kapt" version "1.9.23"
    id "org.jlleitschuh.gradle.ktlint" version "12.1.0"
}

group "org.openapitools"
version "1.0.0"

wrapper {
    gradleVersion = '8.7'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

apply plugin: "kotlin"
apply plugin: "java"
apply plugin: "application"
apply plugin: "org.openapi.generator"

mainClassName = "scorcerer.server.ServerKt"

compileKotlin {
    kotlinOptions.jvmTarget = "11"
    dependsOn = [
            "generateKotlinServer",
            "ktlintFormat"
    ]
}

kotlin {
    jvmToolchain(11)
}


compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

repositories {
    maven { setUrl("https://repo1.maven.org/maven2") }
}

sourceSets {
    main {
        java {
            srcDir("${buildDir}/generated/src")
        }
    }
}

ktlint {
    filter {
        include("${rootDir}/src/**/*.kt")
        exclude { element -> element.file.toString().contains("generated") }
    }
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
    implementation("org.http4k:http4k-core")
    implementation("org.http4k:http4k-contract")
    implementation(platform("org.http4k:http4k-bom:4.41.1.0"))
    implementation(platform("org.http4k:http4k-connect-bom:3.35.0.0"))
    implementation("com.squareup.moshi:moshi-kotlin:1.14.0")
    implementation("org.http4k:http4k-format-moshi")
    implementation("se.ansman.kotshi:api:$kotshiVersion")
    kapt("se.ansman.kotshi:compiler:$kotshiVersion")
    implementation("org.http4k:http4k-serverless-lambda")
    implementation("org.postgresql:postgresql:42.7.3")
    implementation("org.slf4j:slf4j-simple:2.0.6")
    testImplementation("junit:junit:4.13.2")
}

tasks.build {
    dependsOn = [
        "buildZip"
    ]
}

task buildZip(type: Zip) {
    into('lib') {
        from(jar)
        from(configurations.runtimeClasspath)
    }
}

task generateKotlinServer(type: GenerateTask){
    generatorName = "kotlin-server"
    inputSpec = "$buildDir/contract.yaml".toString()
    additionalProperties = [
            interfaceOnly:"true",
            library:"jaxrs-spec"
    ]
    outputDir = "$buildDir/generated".toString()
    templateDir = "$rootDir/templates"
    dependsOn = [
            "fetchContract"
    ]
    configFile = "$rootDir/config.yaml"
    inputs.dir("$rootDir/templates")
    inputs.file("$rootDir/config.yaml")
}

task fetchContract(type: Exec) {
    workingDir "$buildDir"
    commandLine 'curl', 'https://raw.githubusercontent.com/alicolver/score-contract/main/api-contract.yaml', '-o', 'contract.yaml'
    doFirst {
        mkdir "$buildDir"
    }
    outputs.file("$buildDir/contract.yaml")
}

tasks.withType(KaptGenerateStubsTask.class).configureEach {
    dependsOn = [
        "generateKotlinServer"
    ]
}

tasks.withType(KtLintFormatTask.class).configureEach {
    dependsOn = [
        "generateKotlinServer"
    ]
    inputs.dir("$buildDir/generated/src")
    inputs.dir("$rootDir/src")
}