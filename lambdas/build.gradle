import org.jetbrains.kotlin.gradle.internal.KaptGenerateStubsTask
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask
import org.jlleitschuh.gradle.ktlint.tasks.KtLintFormatTask

buildscript {
    ext.kotlin_version = "1.9.21"
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
        classpath("org.openapitools:openapi-generator-gradle-plugin:6.0.0")
    }
}

plugins {
    id "org.jlleitschuh.gradle.ktlint" version "12.1.0"
}

apply plugin: 'jacoco'

group "org.openapitools"
version "1.0.0"

wrapper {
    gradleVersion = '8.7'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

apply plugin: "kotlin"
apply plugin: "java"
apply plugin: "application"
apply plugin: "org.openapi.generator"

mainClassName = "scorcerer.server.ServerKt"

compileKotlin {
    kotlinOptions.jvmTarget = "11"
    dependsOn = [
            "generateKotlinServer",
            "ktlintFormat"
    ]
}

kotlin {
    jvmToolchain(11)
}


compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

repositories {
    maven { setUrl("https://repo1.maven.org/maven2") }
}

sourceSets {
    main {
        java {
            srcDir("${buildDir}/generated/src")
        }
    }
}

ktlint {
    filter {
        include("${rootDir}/src/**/*.kt")
        exclude { element -> element.file.toString().contains("generated") }
    }
}

dependencies {
    implementation("aws.sdk.kotlin:s3:1.2.15")
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.5")
    implementation("org.http4k:http4k-core")
    implementation("org.http4k:http4k-contract")
    implementation(platform("org.http4k:http4k-bom:4.41.1.0"))
    implementation(platform("org.http4k:http4k-connect-bom:3.35.0.0"))
    implementation("org.http4k:http4k-format-jackson:5.20.0.0")
    implementation("org.http4k:http4k-serverless-lambda")
    implementation("org.postgresql:postgresql:42.7.3")
    implementation("org.slf4j:slf4j-simple:2.0.6")
    implementation("aws.sdk.kotlin:cognitoidentityprovider:1.2.5")
    implementation("aws.sdk.kotlin:sqs:1.2.15")
    implementation("com.amazonaws:aws-lambda-java-events:3.11.5")
    implementation("org.jetbrains.exposed:exposed-core:0.49.0")
    implementation("org.jetbrains.exposed:exposed-dao:0.49.0")
    implementation("org.jetbrains.exposed:exposed-kotlin-datetime:0.49.0")
    implementation("com.fasterxml.jackson.core:jackson-core:2.17.1")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.17.1")
    implementation("io.github.crac:org-crac:0.1.3")
    runtimeOnly("org.jetbrains.exposed:exposed-jdbc:0.49.0")
    testImplementation("io.kotlintest:kotlintest:2.0.7")
    testImplementation("io.kotest:kotest-runner-junit5:5.9.0")
    testImplementation("io.kotest:kotest-extensions-jvm:5.9.0")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.10.2")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.10.0")
    testImplementation("io.kotlintest:kotlintest-assertions:3.4.2")
    testImplementation("com.h2database:h2:2.2.224")
    testImplementation("io.mockk:mockk:1.12.0")
}

tasks.build {
    dependsOn = [
        "buildZip"
    ]
}

task buildZip(type: Zip) {
    into('lib') {
        from(jar)
        from(configurations.runtimeClasspath)
    }
}

task generateKotlinServer(type: GenerateTask){
    generatorName = "kotlin-server"
    inputSpec = "$rootDir/contract/api-contract.yaml".toString()
    additionalProperties = [
            interfaceOnly:"true",
            library:"jaxrs-spec"
    ]
    outputDir = "$buildDir/generated".toString()
    templateDir = "$rootDir/templates"
    configFile = "$rootDir/config.yaml"
    inputs.dir("$rootDir/templates")
    inputs.file("$rootDir/config.yaml")
    inputs.file("$rootDir/contract/api-contract.yaml")
}

tasks.withType(KaptGenerateStubsTask.class).configureEach {
    dependsOn = [
        "generateKotlinServer"
    ]
}

tasks.withType(KtLintFormatTask.class).configureEach {
    dependsOn = [
        "generateKotlinServer"
    ]
    inputs.dir("$buildDir/generated/src")
    inputs.dir("$rootDir/src")
}

test {
   useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
}

test.finalizedBy(jacocoTestReport)

jacoco {
    toolVersion = "0.8.2"
}

tasks.jacocoTestReport {
    reports {
        xml.required.set(false)
        csv.required.set(false)
        html.required.set(true)
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'org/openapitools/**')
        }))
    }
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = "0.0".toBigDecimal()
            }
        }
    }
}

build.dependsOn jacocoTestCoverageVerification
