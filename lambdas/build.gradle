buildscript {
    ext.kotlin_version = "1.9.21"
    ext.swagger_annotations_version = "1.5.3"
    ext.jakarta_annotations_version = "2.1.1"
    ext.jakarta_ws_rs_version = "3.1.0"
    ext.jackson_version = "2.9.9"
    ext.kotshiVersion = "2.10.2"
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

plugins {
    id 'com.google.devtools.ksp' version '1.9.21-1.0.15'
}

group "org.openapitools"
version "1.0.0"

wrapper {
    gradleVersion = '6.9'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}


apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "application"

sourceCompatibility = 11

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

repositories {
    maven { setUrl("https://repo1.maven.org/maven2") }
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
    implementation("org.http4k:http4k-core")
    implementation(platform("org.http4k:http4k-bom:4.41.1.0"))
    implementation(platform("org.http4k:http4k-connect-bom:3.35.0.0"))
    implementation("com.squareup.moshi:moshi-kotlin:1.14.0") {
        exclude group: "org.jetbrains.kotlin", module:"kotlin-reflect"
    }
    implementation("org.http4k:http4k-format-moshi") {
        exclude group: "org.jetbrains.kotlin", module:"kotlin-reflect"
    }
    implementation("se.ansman.kotshi:api:$kotshiVersion")
    ksp("se.ansman.kotshi:compiler:$kotshiVersion")
    implementation("org.http4k:http4k-serverless-lambda")
    implementation("org.jetbrains.exposed:exposed-core:0.48.0")
    implementation("org.jetbrains.exposed:exposed-jdbc:0.48.0")
    implementation("org.postgresql:postgresql:42.7.3")
    implementation("org.slf4j:slf4j-simple:2.0.6")
    testImplementation("junit:junit:4.13.2")
}

task buildZip(type: Zip) {
    into('lib') {
        from(jar)
        from(configurations.runtimeClasspath)
    }
}
