import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

group "org.openapitools"
version "1.0.0"

wrapper {
    gradleVersion = '6.9'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

buildscript {
    ext.kotlin_version = "1.7.20"
    ext.swagger_annotations_version = "1.5.3"
    ext.jakarta_annotations_version = "2.1.1"
    ext.jakarta_ws_rs_version = "3.1.0"
    ext.jackson_version = "2.9.9"
    repositories {
        maven { url "https://repo1.maven.org/maven2" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
        classpath("org.openapitools:openapi-generator-gradle-plugin:6.0.0")
    }
}

apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "application"
apply plugin: "org.openapi.generator"

sourceCompatibility = 11

compileKotlin {
    kotlinOptions.jvmTarget = "11"
    dependsOn = [
        "generateKotlinServer"
    ]
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

repositories {
    maven { setUrl("https://repo1.maven.org/maven2") }
}

sourceSets {
    main {
        java {
            srcDir("${buildDir}/generated/src")
        }
    }
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
    implementation("ch.qos.logback:logback-classic:1.2.1")
    implementation("jakarta.ws.rs:jakarta.ws.rs-api:$jakarta_ws_rs_version")
    implementation("jakarta.annotation:jakarta.annotation-api:$jakarta_annotations_version")
    implementation("io.swagger:swagger-annotations:$swagger_annotations_version")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version")
    implementation("org.glassfish.jersey.containers:jersey-container-grizzly2-http:3.1.5")
    implementation("org.glassfish:javax.annotation:3.2-b06")
    implementation("org.glassfish.jersey.inject:jersey-hk2:3.1.5")
    implementation("org.glassfish.jersey.media:jersey-media-json-jackson:3.1.5")
    implementation("javax.ws.rs:javax.ws.rs-api:2.1.1")
    implementation("com.amazonaws.serverless:aws-serverless-java-container-jersey:2.0.0")
    testImplementation("junit:junit:4.13.2")
}

task generateKotlinServer(type: GenerateTask){
    generatorName = "kotlin-server"
    inputSpec = "$buildDir/contract.yaml".toString()
    additionalProperties = [
            interfaceOnly:"true",
            library:"jaxrs-spec"
    ]
    outputDir = "$buildDir/generated".toString()
    dependsOn = [
        "fetchContract"
    ]
    finalizedBy = [
        "fixGeneratedImports"
    ]
}

task fixGeneratedImports(type: Exec) {
    workingDir "$buildDir/generated/src/main/kotlin/org/openapitools/server"
    commandLine "bash", "-c", 'sed -i "" "s/javax.ws.rs/jakarta.ws.rs/g" apis/*.kt'
}

task fetchContract(type: Exec) {
    workingDir "$buildDir"
    commandLine 'curl', 'https://raw.githubusercontent.com/alicolver/score-contract/main/api-contract.yaml', '-o', 'contract.yaml'
    doFirst {
        mkdir "$buildDir"
    }
}

task buildZip(type: Zip) {
    into('lib') {
        from(jar)
        from(configurations.runtimeClasspath)
    }
}
